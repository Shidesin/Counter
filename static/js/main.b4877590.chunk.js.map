{"version":3,"sources":["CounterStyle.module.css","serviceWorker.ts","Header.tsx","Counter_2.0/Button.tsx","Counter_2.0/CounterMonitor.tsx","Counter_2.0/DisplayCounter.tsx","Counter_2.0/ValueInput.tsx","Counter_2.0/DisplaySetCounter.tsx","Counter/Counter.tsx","Counter_2.0/Counter2.tsx","App.tsx","index.tsx","Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","styles","header_block","header_block_button","to","activeClassName","activeLink","Button","props","button_link","onClick","onClickFunction","disabled","disableMod","title","CounterMonitor","textDisplay","DisplayCounter","settingDisplay_box","valueCounter","MaxValueNumber","settingValueMax","button_box","addNumber","disableModInc","resetNumber","disableModReset","ValueInput","titleValue","value","onChange","onCange","type","DisplaySetCounter","settingDisplay","settingValueMin","event","callbackValueMin","Number","currentTarget","setCounterValue","errorSet","callbackValueMax","button_box_setting","setButtonFunc","disableModSet","Counter","initialState","restoreState","useState","setSettingValueMin","setSettingValueMax","error","setError","correctDisplayStyle","error_display","correct_display","errorStyleValueInput","input","input_error","saveState","Counter2","path","render","key","state","stateAsString","JSON","stringify","localStorage","setItem","defaultState","getItem","parse","App","exact","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b4877590.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingDisplay_box\":\"CounterStyle_settingDisplay_box__JSS-5\",\"settingDisplay\":\"CounterStyle_settingDisplay__26pxs\",\"titleValue\":\"CounterStyle_titleValue__39OVZ\",\"input\":\"CounterStyle_input__1kbXJ\",\"input_error\":\"CounterStyle_input_error__10E8M\",\"button_box\":\"CounterStyle_button_box__1bsKn\",\"button_box_setting\":\"CounterStyle_button_box_setting__1ejrb\",\"button\":\"CounterStyle_button__2iod_\",\"button_link\":\"CounterStyle_button_link__2BEWN\",\"correct_display\":\"CounterStyle_correct_display__3qIB_\",\"error_display\":\"CounterStyle_error_display__331h6\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from './Header.module.css'\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <nav className={styles.header_block}>\r\n            <div>\r\n                <span className={styles.header_block_button}>\r\n                    <NavLink to={'/Counter'} activeClassName={styles.activeLink}>Counter</NavLink>\r\n                </span>\r\n                <span className={styles.header_block_button}>\r\n                    <NavLink to={'/Counter_2/displayCounter'} activeClassName={styles.activeLink}>Counter 2</NavLink>\r\n                </span>\r\n            </div>\r\n        </nav>\r\n\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styles from '../CounterStyle.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onClickFunction?: () => void\r\n    disableMod?: boolean\r\n}\r\n\r\n\r\nexport function Button(props: PropsType) {\r\n    return (\r\n            <button className={styles.button_link}  onClick={props.onClickFunction} disabled={props.disableMod} >{props.title}</button>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    valueCounter: number\r\n    MaxValueNumber: number\r\n    textDisplay?: string | number\r\n    className: string\r\n}\r\n\r\nexport const CounterMonitor = (props:PropsType ) => {\r\n    return (\r\n        <div  className={props.className}>\r\n            {props.textDisplay}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Button} from './Button';\r\nimport {CounterMonitor} from './CounterMonitor';\r\nimport styles from '../CounterStyle.module.css'\r\n\r\ntype CounterPropsType = {\r\n    valueCounter: number\r\n    textDisplay?: string | number\r\n    settingValueMax: number\r\n    addNumber: () => void\r\n    resetNumber: () => void\r\n    disableModInc: boolean\r\n    disableModReset: boolean\r\n    className: string\r\n}\r\n\r\n\r\nconst DisplayCounter: React.FC<CounterPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={styles.settingDisplay_box}>\r\n\r\n            <CounterMonitor\r\n                className={props.className}\r\n                textDisplay={props.textDisplay}\r\n                valueCounter={props.valueCounter}\r\n                MaxValueNumber={props.settingValueMax}\r\n            />\r\n\r\n            <div className={styles.button_box}>\r\n                <Button\r\n                    title={'Inc'}\r\n                    onClickFunction={props.addNumber}\r\n                    disableMod={props.disableModInc}\r\n                />\r\n\r\n                <Button\r\n                    title={'Reset'}\r\n                    onClickFunction={props.resetNumber}\r\n                    disableMod={props.disableModReset}\r\n                />\r\n                <NavLink to={'/Counter_2/displaySetCounter'}>\r\n                    <Button title={'Set'}/>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayCounter;","import React, {ChangeEvent} from 'react';\r\nimport styles from '../CounterStyle.module.css'\r\n\r\nexport type ValueInputPropsType = {\r\n    title: string\r\n    onCange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    value: number\r\n    className: string\r\n}\r\nexport const ValueInput = (props: ValueInputPropsType) => {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <span className={styles.titleValue}>{props.title}</span>\r\n            <input value={props.value}  onChange={props.onCange} className={props.className} type={'number'}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ValueInput} from './ValueInput';\r\nimport styles from '../CounterStyle.module.css'\r\nimport {Button} from './Button';\r\n\r\n\r\ntype DisplaySetCounterPropsType = {\r\n    callbackValueMin: (value: number) => void\r\n    callbackValueMax: (value: number) => void\r\n    setCounterValue: (value: number) => void\r\n    disableModSet:() => boolean\r\n    setButtonFunc: () => void\r\n    settingValueMax: number\r\n    settingValueMin: number\r\n    errorSet?: () => void\r\n    className: string\r\n}\r\n\r\nexport function DisplaySetCounter(props: DisplaySetCounterPropsType) {\r\n\r\n    const onCangeValueMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMin(Number(event.currentTarget.value))\r\n        props.setCounterValue(Number(event.currentTarget.value))\r\n        props.errorSet && props.errorSet()\r\n    }\r\n\r\n    const onCangeValueMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMax(Number(event.currentTarget.value))\r\n        props.errorSet && props.errorSet()\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={styles.settingDisplay_box}>\r\n            <div className={styles.settingDisplay}>\r\n                <ValueInput className={props.className} value={props.settingValueMin} onCange={onCangeValueMin}\r\n                            title={'Min value'}/>\r\n                <ValueInput className={props.className} value={props.settingValueMax} onCange={onCangeValueMax}\r\n                            title={'Max value'}/>\r\n            </div>\r\n            <div className={styles.button_box_setting}>\r\n                <div>\r\n                    <NavLink\r\n                        to={'/Counter_2/displayCounter'} >\r\n                        <Button title={'Set'} onClickFunction={props.setButtonFunc} disableMod={props.disableModSet()}/>\r\n                    </NavLink>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// aria-disabled={'true'}","import React, {useState} from 'react';\nimport '.././App.css';\nimport {restoreState, saveState} from '../App';\nimport styles from '../CounterStyle.module.css';\nimport DisplayCounter from '../Counter_2.0/DisplayCounter';\nimport {DisplaySetCounter} from '../Counter_2.0/DisplaySetCounter';\n\n\nexport function Counter() {\n\n    const initialState = restoreState<Array<number>>(`${Counter}`, [0, 0])\n\n    let [settingValueMin, setSettingValueMin] = useState(initialState[0])\n\n    let [settingValueMax, setSettingValueMax] = useState(initialState[1])\n\n    let [valueCounter, setCounterValue] = useState<number>(settingValueMin);\n\n    let [error, setError] = useState<string>('Input values and click \\'Set\\'')\n\n    const setButtonFunc = () => {\n        saveState<Array<number>>(`${Counter}`, [settingValueMin, settingValueMax])\n    }\n\n    const addNumber = () => setCounterValue(valueCounter + 1)\n\n    const resetNumber = () => setCounterValue(settingValueMin)\n\n    const errorSet = () => {\n        if (settingValueMin < 0 ||\n            settingValueMin > settingValueMax ||\n            settingValueMax < 0 ||\n            (settingValueMin === settingValueMax && settingValueMin !== 0)) {\n                setError('Incorrect value')\n        } else if (settingValueMin === 0 && settingValueMax === 0) {\n            setError(\"Input values and click 'Set'\")\n        } else {\n            setError('')\n        }\n    }\n\n    let disableModInc: boolean =\n        (settingValueMax < 0) ||\n        (settingValueMin < 0) ||\n        (settingValueMin > settingValueMax) ||\n        (settingValueMin === settingValueMax) ||\n        (settingValueMax === 0 && settingValueMin < 0) ||\n        (settingValueMax < 0 && settingValueMin < 0) ||\n        (settingValueMax > 0 && settingValueMin < 0) ||\n        (settingValueMax > 0 && settingValueMin < 0)\n\n    const disableModSet = () => {\n        errorSet()\n        return (\n            (settingValueMax < 0) ||\n            (settingValueMin < 0) ||\n            (settingValueMin > settingValueMax) ||\n            (settingValueMin === settingValueMax) ||\n            (settingValueMax === 0 && settingValueMin < 0) ||\n            (settingValueMax < 0 && settingValueMin < 0) ||\n            (settingValueMax > 0 && settingValueMin < 0) ||\n            (settingValueMax > 0 && settingValueMin < 0)\n        )\n    }\n\n    let disableModReset: boolean = valueCounter === settingValueMin\n\n    let correctDisplayStyle = disableModInc ? `${styles.error_display}` : `${styles.correct_display}`\n\n    let errorStyleValueInput = disableModInc ? `${styles.input} ${styles.input_error}` : `${styles.input}`\n\n    let textDisplay = error ? error : valueCounter\n\n    return (\n        <div className=\"App\">\n            <DisplaySetCounter\n                callbackValueMin={setSettingValueMin}\n                callbackValueMax={setSettingValueMax}\n                setCounterValue={setCounterValue}\n                disableModSet={disableModSet}\n                setButtonFunc={setButtonFunc}\n                settingValueMin={settingValueMin}\n                settingValueMax={settingValueMax}\n                errorSet={errorSet}\n                className={errorStyleValueInput}\n            />\n            <DisplayCounter\n                valueCounter={valueCounter}\n                settingValueMax={settingValueMax}\n                addNumber={addNumber}\n                resetNumber={resetNumber}\n                disableModInc={disableModInc}\n                disableModReset={disableModReset}\n                className={correctDisplayStyle}\n                textDisplay={textDisplay}\n            />\n        </div>\n    );\n}\n","import React, {useState} from 'react';\r\nimport DisplayCounter from './DisplayCounter';\r\nimport './../App.css';\r\nimport {Route} from 'react-router-dom';\r\nimport {DisplaySetCounter} from './DisplaySetCounter';\r\nimport {restoreState, saveState} from '../App';\r\nimport styles from '../CounterStyle.module.css';\r\n\r\n\r\nfunction Counter2() {\r\n\r\n    const initialState = restoreState<Array<number>>(`${Counter2}`, [0, 0])\r\n\r\n    let [settingValueMin, setSettingValueMin] = useState(initialState[0])\r\n\r\n    let [settingValueMax, setSettingValueMax] = useState(initialState[1])\r\n\r\n    let [valueCounter, setCounterValue] = useState<number>(settingValueMin);\r\n\r\n    const setButtonFunc = () => {\r\n        saveState<Array<number>>(`${Counter2}`, [settingValueMin, settingValueMax])\r\n    }\r\n\r\n    const addNumber = () => setCounterValue(valueCounter + 1)\r\n\r\n    const resetNumber = () => setCounterValue(settingValueMin)\r\n\r\n    let disableModInc: boolean =\r\n        (valueCounter < 0 && valueCounter < settingValueMax) ||\r\n        (valueCounter === settingValueMax) ||\r\n        (valueCounter > settingValueMax);\r\n\r\n    let disableModReset: boolean = valueCounter === settingValueMin\r\n\r\n    let disableModSet  = () => {\r\n        return (\r\n            (settingValueMax < 0) ||\r\n            (settingValueMin < 0) ||\r\n            (settingValueMin > settingValueMax) ||\r\n            (settingValueMin === settingValueMax) ||\r\n            (settingValueMax === 0 && settingValueMin < 0) ||\r\n            (settingValueMax < 0 && settingValueMin < 0) ||\r\n            (settingValueMax > 0 && settingValueMin < 0) ||\r\n            (settingValueMax > 0 && settingValueMin < 0)\r\n        )\r\n    }\r\n\r\n    let textDisplay = (settingValueMin === 0 && settingValueMax === 0) ? \"Click 'Set' and input value\" : valueCounter\r\n\r\n    let correctDisplayStyle = disableModInc ? `${styles.error_display}` : `${styles.correct_display}`\r\n\r\n    let errorStyleValueInput = disableModSet() ? `${styles.input} ${styles.input_error}`: `${styles.input}`\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <Route path={'/Counter_2/displayCounter'}\r\n                   render={() =>\r\n                       <DisplayCounter\r\n                           valueCounter={valueCounter}\r\n                           textDisplay={textDisplay}\r\n                           settingValueMax={settingValueMax}\r\n                           addNumber={addNumber}\r\n                           resetNumber={resetNumber}\r\n                           disableModInc={disableModInc}\r\n                           disableModReset={disableModReset}\r\n                           className={correctDisplayStyle}\r\n                       />}\r\n            />\r\n            <Route path={'/Counter_2/displaySetCounter'}\r\n                   render={() =>\r\n                       <DisplaySetCounter\r\n                           callbackValueMin={setSettingValueMin}\r\n                           callbackValueMax={setSettingValueMax}\r\n                           setCounterValue={setCounterValue}\r\n                           disableModSet={disableModSet}\r\n                           setButtonFunc={setButtonFunc}\r\n                           settingValueMin={settingValueMin}\r\n                           settingValueMax={settingValueMax}\r\n                           className={errorStyleValueInput}\r\n                       />}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Counter2;","import React from 'react';\nimport Header from './Header';\nimport {Counter} from './Counter/Counter';\nimport Counter2 from './Counter_2.0/Counter2';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\n\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state);\n    localStorage.setItem(key, stateAsString)\n}\nexport function restoreState<T>(key: string, defaultState: T) {\n    const stateAsString = localStorage.getItem(key);\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\n    return defaultState;\n}\n\n\nexport function App() {\n\n    return(\n        <HashRouter>\n            <Header/>\n            <Switch>\n                <Route path={'/'} exact render={() => <Redirect to={'/Counter'}/>}/>\n                <Route path={'/Counter'} render={() => <Counter/>}/>\n                <Route path={'/Counter_2'} render={() => <Counter2/>}/>\n            </Switch>\n        </HashRouter>\n    )\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from './App';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_block\":\"Header_header_block__2hhkQ\",\"header_block_button\":\"Header_header_block_button__1kjKw\",\"activeLink\":\"Header_activeLink__36NIn\"};"],"sourceRoot":""}