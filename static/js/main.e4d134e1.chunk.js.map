{"version":3,"sources":["Counter/SettingBox/SettingsBox.module.css","serviceWorker.ts","Counter/CounterDisplay.tsx","Counter/ButtonBlock.tsx","Counter/Counter.tsx","Counter/SettingBox/ValueInput.tsx","Counter/SettingBox/SettingsBox.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","CounterDisplay","props","ErrorMessage","correctDisplay","valueCounter","className","MaxValueNumber","Button","onClick","onClickFunction","disabled","disableMod","title","Counter","disableModInc","disableModReset","MinValueNumber","minMaxValue","setCounterValue","ValueInput","errorMode","errorStyle","styles","input","input_error","titleValue","value","onChange","onCange","type","SettingCounter","disableModSet","settingValueMin","settingValueMax","initialState","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","restoreState","console","log","useState","setSettingValueMin","setSettingValueMax","settingDisplay_box","settingDisplay","event","min","Number","currentTarget","callBackError","max","button_box","array","callback","state","stringify","setItem","saveState","App","setMinMaxValue","error","setError","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e4d134e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingDisplay_box\":\"SettingsBox_settingDisplay_box__17OyQ\",\"settingDisplay\":\"SettingsBox_settingDisplay__yvCbE\",\"titleValue\":\"SettingsBox_titleValue__1WHaS\",\"input\":\"SettingsBox_input__39x2F\",\"input_error\":\"SettingsBox_input_error__24uCn\",\"button_box\":\"SettingsBox_button_box__1mPV0\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n/*import limitNumber from './Counter';*/\r\n\r\n\r\ntype PropsType = {\r\n    valueCounter: number\r\n    MaxValueNumber: number\r\n    ErrorMessage?: string\r\n}\r\n\r\nexport const CounterDisplay = (props:PropsType ) => {\r\n\r\n    let ErrorMessage = props.ErrorMessage\r\n\r\n    let correctDisplay = ErrorMessage ? ErrorMessage : props.valueCounter\r\n\r\n\r\n    return (\r\n        <div className= {props.valueCounter < props.MaxValueNumber ? `${'display_box'}` : `${'end_number'}`} >\r\n            {correctDisplay}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onClickFunction: () => void\r\n    disableMod: boolean\r\n    disableModSet?: boolean\r\n}\r\n\r\n\r\nexport function Button(props: PropsType) {\r\n    return (\r\n            <button className={'button'} onClick={props.onClickFunction} disabled={props.disableMod} >{props.title}</button>\r\n    )\r\n}","import React from 'react';\r\nimport {CounterDisplay} from './CounterDisplay';\r\nimport {Button} from './ButtonBlock';\r\nimport './Counter.css';\r\n\r\ntype CounterPropsType = {\r\n    minMaxValue: Array<number>\r\n    valueCounter: number\r\n    setCounterValue: (value: number) => void\r\n    ErrorMessage: string\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n\r\n    const MinValueNumber = props.minMaxValue[0];\r\n    const MaxValueNumber = props.minMaxValue[1];\r\n\r\n\r\n\r\n\r\n    let disableModInc: boolean;\r\n    props.valueCounter < MaxValueNumber ? disableModInc = false : disableModInc = true;\r\n\r\n    let disableModReset: boolean;\r\n    props.valueCounter !== MinValueNumber ? disableModReset = false : disableModReset = true;\r\n\r\n    const addNumber = () => props.setCounterValue(props.valueCounter + 1)\r\n\r\n    const resetNumber = () => props.setCounterValue(MinValueNumber)\r\n\r\n\r\n    return (\r\n        <div className={'counter_box'}>\r\n            <CounterDisplay ErrorMessage={props.ErrorMessage} valueCounter={props.valueCounter} MaxValueNumber={MaxValueNumber}/>\r\n            <div className={'button_box'}>\r\n                <Button title={'Inc'} onClickFunction={addNumber} disableMod={disableModInc}/>\r\n                <Button title={'Reset'} onClickFunction={resetNumber} disableMod={disableModReset}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import styles from './SettingsBox.module.css';\r\nimport React, {ChangeEvent} from 'react';\r\n\r\nexport type ValueInputPropsType = {\r\n    title: string\r\n    onCange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    value: number\r\n    errorStyle: boolean\r\n}\r\nexport const ValueInput = (props: ValueInputPropsType) => {\r\n\r\nlet errorMode = props.errorStyle ? `${styles.input} ${styles.input_error}` : `${styles.input}`\r\n\r\n    return (\r\n        <div>\r\n            <span className={styles.titleValue}>{props.title}</span>\r\n            <input value={props.value}  onChange={props.onCange} className={errorMode} type={'number'}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from './SettingsBox.module.css'\r\nimport {Button} from '../ButtonBlock';\r\nimport {ValueInput} from './ValueInput';\r\nimport {restoreState, saveState} from '../../App';\r\n\r\n\r\ntype SettingCounterPropsType = {\r\n    callback: (value: Array<number>) => void\r\n    setCounterValue: (value: number) => void\r\n    callBackError: (value: string) => void\r\n}\r\n\r\nexport function SettingCounter(props: SettingCounterPropsType) {\r\n\r\n    const disableModSet = () => {\r\n        return settingValueMin === null || settingValueMax === null || settingValueMin < 0 || settingValueMin > settingValueMax || settingValueMin === settingValueMax || settingValueMax < 0 ;\r\n    }\r\n\r\n    const initialState = restoreState<Array<number>>('save setting', [0,0])\r\n    console.log(initialState)\r\n\r\n    let [settingValueMin, setSettingValueMin] = useState(initialState[0])\r\n    let [settingValueMax, setSettingValueMax] = useState(initialState[1])\r\n\r\n    const setValue = () => {\r\n        let array = [settingValueMin, settingValueMax]\r\n        props.callback(array)\r\n        props.setCounterValue(settingValueMin)\r\n        saveState<Array<number>>('save setting',array )\r\n        props.callBackError('')\r\n    }\r\n\r\n    const onCangeValueMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let min = Number(event.currentTarget.value)\r\n        if (min < 0){\r\n            setSettingValueMin(Number(event.currentTarget.value))\r\n            props.callBackError(\"Value can't be less 0\")\r\n        } else if (min > settingValueMax){\r\n            setSettingValueMin(Number(event.currentTarget.value))\r\n            props.callBackError(\"Value can't be greater max value\")\r\n        }else if (min === settingValueMax){\r\n            setSettingValueMin(Number(event.currentTarget.value))\r\n            props.callBackError('Value can\\'t be greater than equal max value')\r\n        } else if (min === null){\r\n            setSettingValueMin(Number(event.currentTarget.value))\r\n            props.callBackError('Value must be set')\r\n        }else {\r\n            setSettingValueMin(Number(event.currentTarget.value))\r\n            props.callBackError('')\r\n        }\r\n    }\r\n\r\n    const onCangeValueMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let max = Number(event.currentTarget.value)\r\n        if (max < 0){\r\n            setSettingValueMax(Number(event.currentTarget.value))\r\n            props.callBackError('Value can\\'t be less than zero')\r\n        }else if (max === null){\r\n            setSettingValueMin(Number(event.currentTarget.value))\r\n            props.callBackError('Value must be set')\r\n        } else if (max < settingValueMin){\r\n            setSettingValueMax(Number(event.currentTarget.value))\r\n            props.callBackError('The value can\\'t be less than min value')\r\n        } else if (max === settingValueMin){\r\n            setSettingValueMax(Number(event.currentTarget.value))\r\n            props.callBackError('Value can\\'t be greater than equal mix value')\r\n        } else if (max > settingValueMin){\r\n            setSettingValueMax(Number(event.currentTarget.value))\r\n            props.callBackError('')\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={styles.settingDisplay_box}>\r\n            <div className={styles.settingDisplay}>\r\n                <ValueInput errorStyle={disableModSet()} value={settingValueMin} onCange={onCangeValueMin} title={'min value'}/>\r\n                <ValueInput errorStyle={disableModSet()} value={settingValueMax} onCange={onCangeValueMax} title={'max value'}/>\r\n            </div>\r\n            <div className={styles.button_box}>\r\n                <Button title={'Set'} onClickFunction={setValue} disableMod={disableModSet()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './Counter/Counter';\nimport {SettingCounter} from './Counter/SettingBox/SettingsBox';\n\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state);\n    localStorage.setItem(key, stateAsString)\n}\n\nexport function restoreState<T>(key: string, defaultState: T) {\n    const stateAsString = localStorage.getItem(key);\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\n    return defaultState;\n}\n\nexport function App() {\n\n    let [minMaxValue, setMinMaxValue] = useState<Array<number>>([]);\n\n    let [valueCounter, setCounterValue] = useState<number>(minMaxValue[0]);\n\n    let [error, setError] = useState<string>('Input values and click set')\n\n\n    let callBack = (value: Array<number>) => setMinMaxValue(value);\n\n    const callBackError = (value: string) => setError(value)\n\n\n    return (\n        <div className=\"App\">\n            <SettingCounter\n                callBackError={callBackError}\n                callback={callBack}\n                setCounterValue={setCounterValue}\n            />\n            <Counter\n                minMaxValue={minMaxValue}\n                valueCounter={valueCounter}\n                setCounterValue={setCounterValue}\n                ErrorMessage={error}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}