{"version":3,"sources":["Counter_2.0/CounterStyle.module.css","serviceWorker.ts","Counter/CounterDisplay.tsx","Counter/ButtonBlock.tsx","Counter/Counter.tsx","Counter/SettingBox/ValueInput.tsx","Counter/SettingBox/SettingsBox.tsx","App.tsx","Header.tsx","Counter_2.0/Button.tsx","Counter_2.0/CounterMonitor.tsx","Counter_2.0/DisplayCounter.tsx","Counter_2.0/ValueInput.tsx","Counter_2.0/DisplaySetCounter.tsx","Counter_2.0/CounterBox.tsx","index.tsx","Counter/SettingBox/SettingsBox.module.css","Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","CounterDisplay","props","ErrorMessage","correctDisplay","valueCounter","correctDisplayStyle","MaxValueNumber","className","Button","onClick","onClickFunction","disabled","disableMod","title","Counter","disableModReset","MinValueNumber","settingValueMin","settingValueMax","disableModInc","setCounterValue","ValueInput","errorMode","errorStyle","styles","input","input_error","titleValue","value","onChange","onCange","type","SettingCounter","settingDisplay_box","settingDisplay","disableModSet","event","callbackValueMin","Number","currentTarget","errorSet","callbackValueMax","button_box","setButtonFunc","App","initialState","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","restoreState","useState","setSettingValueMin","setSettingValueMax","error","setError","array","state","stringify","setItem","saveState","Header","header_block","header_block_button","to","activeClassName","activeLink","button_link","CounterMonitor","error_display","correct_display","DisplayCounter","DisplaySetCounter","button_box_setting","CounterBox","errorMessage","path","render","ReactDOM","StrictMode","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4a79049b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingDisplay_box\":\"CounterStyle_settingDisplay_box__2ZJd9\",\"settingDisplay\":\"CounterStyle_settingDisplay__7SZjJ\",\"titleValue\":\"CounterStyle_titleValue__2Qu_V\",\"input\":\"CounterStyle_input__3sR6f\",\"input_error\":\"CounterStyle_input_error__2dSur\",\"button_box\":\"CounterStyle_button_box__2Ji6p\",\"button_box_setting\":\"CounterStyle_button_box_setting__5TRdy\",\"button\":\"CounterStyle_button__2Y9b4\",\"button_link\":\"CounterStyle_button_link__3UrYZ\",\"correct_display\":\"CounterStyle_correct_display__21jM9\",\"error_display\":\"CounterStyle_error_display__p4Qmq\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Counter.css';\r\n\r\n\r\ntype PropsType = {\r\n    valueCounter: number\r\n    MaxValueNumber: number\r\n    ErrorMessage?: string\r\n}\r\n\r\nexport const CounterDisplay = (props:PropsType ) => {\r\n\r\n    let ErrorMessage = props.ErrorMessage\r\n\r\n    let correctDisplay = ErrorMessage ? ErrorMessage : props.valueCounter\r\n\r\n     let correctDisplayStyle = (props.valueCounter < 0 && props.valueCounter < props.MaxValueNumber) || (props.valueCounter < 0 && props.valueCounter < props.MaxValueNumber) || (props.valueCounter ===  props.MaxValueNumber) || (props.valueCounter > props.MaxValueNumber) ?  `${'end_number'}`: `${'display_box'}`\r\n\r\n    return (\r\n        <div className = {correctDisplayStyle} >\r\n            {correctDisplay}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './Counter.css';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onClickFunction: () => void\r\n    disableMod: boolean\r\n}\r\n\r\n\r\nexport function Button(props: PropsType) {\r\n    return (\r\n            <button className={'button'} onClick={props.onClickFunction} disabled={props.disableMod} >{props.title}</button>\r\n    )\r\n}","import React from 'react';\r\nimport {CounterDisplay} from './CounterDisplay';\r\nimport {Button} from './ButtonBlock';\r\nimport './Counter.css';\r\n\r\n\r\ntype CounterPropsType = {\r\n    valueCounter: number\r\n    setCounterValue: (value: number) => void\r\n    ErrorMessage: string\r\n    settingValueMin: number\r\n    settingValueMax: number\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n\r\n    const MinValueNumber = props.settingValueMin;\r\n    const MaxValueNumber = props.settingValueMax;\r\n\r\n\r\n    let disableModInc: boolean = (props.valueCounter < 0 && props.valueCounter < MaxValueNumber) || (props.valueCounter < 0 && props.valueCounter < MaxValueNumber) || (props.valueCounter === MaxValueNumber) || (props.valueCounter > MaxValueNumber) ? true : false;\r\n\r\n\r\n    let disableModReset: boolean;\r\n    props.valueCounter !== MinValueNumber ? disableModReset = false : disableModReset = true;\r\n\r\n    const addNumber = () => props.setCounterValue(props.valueCounter + 1)\r\n\r\n    const resetNumber = () => props.setCounterValue(MinValueNumber)\r\n\r\n\r\n    return (\r\n        <div className={'counter_box'}>\r\n            <CounterDisplay\r\n                ErrorMessage={props.ErrorMessage}\r\n                valueCounter={props.valueCounter}\r\n                MaxValueNumber={MaxValueNumber}\r\n            />\r\n            <div className={'button_box'}>\r\n                <Button title={'Inc'} onClickFunction={addNumber} disableMod={disableModInc}/>\r\n                <Button title={'Reset'} onClickFunction={resetNumber} disableMod={disableModReset}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import styles from './SettingsBox.module.css';\r\n// import styles from './CounterStyles.module.css';\r\nimport React, {ChangeEvent} from 'react';\r\n\r\nexport type ValueInputPropsType = {\r\n    title: string\r\n    onCange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    value: number\r\n    errorStyle: boolean\r\n}\r\nexport const ValueInput = (props: ValueInputPropsType) => {\r\n\r\nlet errorMode = props.errorStyle ? `${styles.input} ${styles.input_error}` : `${styles.input}`\r\n\r\n    return (\r\n        <div>\r\n            <span className={styles.titleValue}>{props.title}</span>\r\n            <input value={props.value}  onChange={props.onCange} className={errorMode} type={'number'}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport styles from './SettingsBox.module.css'\r\nimport {Button} from '../ButtonBlock';\r\nimport {ValueInput} from './ValueInput';\r\n\r\n\r\ntype SettingCounterPropsType = {\r\n    callbackValueMin: (value: number) => void\r\n    callbackValueMax: (value: number) => void\r\n    setCounterValue: (value: number) => void\r\n    disableModSet: () => boolean\r\n    setButtonFunc: () => void\r\n    settingValueMax: number\r\n    settingValueMin: number\r\n    errorSet: () => void\r\n}\r\n\r\nexport function SettingCounter(props: SettingCounterPropsType) {\r\n\r\n    const onCangeValueMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMin(Number(event.currentTarget.value))\r\n        props.setCounterValue(Number(event.currentTarget.value))\r\n        props.errorSet()\r\n\r\n    }\r\n\r\n    const onCangeValueMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMax(Number(event.currentTarget.value))\r\n        props.errorSet()\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={styles.settingDisplay_box}>\r\n            <div className={styles.settingDisplay}>\r\n                <ValueInput errorStyle={props.disableModSet()} value={props.settingValueMin} onCange={onCangeValueMin}\r\n                            title={'min value'}/>\r\n                <ValueInput errorStyle={props.disableModSet()} value={props.settingValueMax} onCange={onCangeValueMax}\r\n                            title={'max value'}/>\r\n            </div>\r\n            <div className={styles.button_box}>\r\n                <Button title={'Set'} onClickFunction={props.setButtonFunc} disableMod={props.disableModSet()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './Counter/Counter';\nimport {SettingCounter} from './Counter/SettingBox/SettingsBox';\n\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state);\n    localStorage.setItem(key, stateAsString)\n}\nexport function restoreState<T>(key: string, defaultState: T) {\n    const stateAsString = localStorage.getItem(key);\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\n    return defaultState;\n}\n\n\nexport function App() {\n\n    const initialState = restoreState<Array<number>>('save setting', [0,0])\n\n    let [settingValueMin, setSettingValueMin] = useState(initialState[0])\n\n    let [settingValueMax, setSettingValueMax] = useState(initialState[1])\n\n    let [valueCounter, setCounterValue] = useState<number>(settingValueMin);\n\n    let [error, setError] = useState<string>(\"Input values and click 'Set'\")\n\n    let array = [settingValueMin, settingValueMax]\n\n    const setButtonFunc = () => {\n        saveState<Array<number>>('save setting',array )\n    }\n\n    const errorSet = () => {\n        if ( settingValueMin < 0 || settingValueMin > settingValueMax  || settingValueMax < 0 || (settingValueMin === settingValueMax && settingValueMin !== 0))  {\n            setError('Incorrect value')\n        } else if(settingValueMin === 0 && settingValueMax === 0) {\n            setError(\"Input values and click 'Set'\")\n        } else {\n            setError('')\n        }\n    }\n\n    const disableModSet = () => {\n        errorSet()\n        return (\n            (settingValueMax < 0) ||\n            (settingValueMin < 0) ||\n            (settingValueMin > settingValueMax) ||\n            (settingValueMin === settingValueMax) ||\n            (settingValueMax === 0 && settingValueMin < 0) ||\n            (settingValueMax < 0 && settingValueMin < 0) ||\n            (settingValueMax > 0 && settingValueMin < 0) ||\n            (settingValueMax > 0 && settingValueMin < 0)\n        )\n    }\n\n    return (\n        <div className=\"App\">\n            <SettingCounter\n                callbackValueMin={setSettingValueMin}\n                callbackValueMax={setSettingValueMax}\n                setCounterValue={setCounterValue}\n                disableModSet={disableModSet}\n                setButtonFunc={setButtonFunc}\n                settingValueMin={settingValueMin}\n                settingValueMax={settingValueMax}\n                errorSet={errorSet}\n            />\n            <Counter\n                valueCounter={valueCounter}\n                setCounterValue={setCounterValue}\n                ErrorMessage={error}\n                settingValueMin={settingValueMin}\n                settingValueMax={settingValueMax}\n            />\n        </div>\n    );\n}\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from './Header.module.css'\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <nav className={styles.header_block}>\r\n            <div>\r\n                <span className={styles.header_block_button}>\r\n                    <NavLink to={'/Counter'} activeClassName={styles.activeLink}>Counter</NavLink>\r\n                </span>\r\n                <span className={styles.header_block_button}>\r\n                    <NavLink to={'/Counter_2/displayCounter'} activeClassName={styles.activeLink}>Counter 2</NavLink>\r\n                </span>\r\n            </div>\r\n        </nav>\r\n\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styles from './CounterStyle.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onClickFunction?: () => void\r\n    disableMod?: boolean\r\n\r\n}\r\n\r\n\r\nexport function Button(props: PropsType) {\r\n    return (\r\n            <button className={styles.button_link}  onClick={props.onClickFunction} disabled={props.disableMod} >{props.title}</button>\r\n    )\r\n}","import React from 'react';\r\nimport styles from './CounterStyle.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    valueCounter: number\r\n    MaxValueNumber: number\r\n    ErrorMessage?: string\r\n}\r\n\r\nexport const CounterMonitor = (props:PropsType ) => {\r\n\r\n    let ErrorMessage = props.ErrorMessage\r\n\r\n    let correctDisplay = ErrorMessage ? ErrorMessage : props.valueCounter\r\n\r\n     let correctDisplayStyle = (props.valueCounter < 0 && props.valueCounter < props.MaxValueNumber) || (props.valueCounter < 0 && props.valueCounter < props.MaxValueNumber) || (props.valueCounter ===  props.MaxValueNumber) || (props.valueCounter > props.MaxValueNumber) ?  `${styles.error_display}`: `${styles.correct_display}`\r\n\r\n    return (\r\n        <div  className={correctDisplayStyle}>\r\n            {correctDisplay}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Button} from './Button';\r\nimport {CounterMonitor} from './CounterMonitor';\r\nimport styles from './CounterStyle.module.css'\r\n\r\ntype CounterPropsType = {\r\n    valueCounter: number\r\n    setCounterValue: (value: number) => void\r\n    ErrorMessage?: string\r\n    settingValueMin: number\r\n    settingValueMax: number\r\n    setButtonFunc: () => void\r\n}\r\n\r\n\r\nconst DisplayCounter: React.FC<CounterPropsType> = (props) => {\r\n\r\n    const MinValueNumber = props.settingValueMin;\r\n    const MaxValueNumber = props.settingValueMax;\r\n\r\n    let disableModInc: boolean = (props.valueCounter < 0 && props.valueCounter < MaxValueNumber) || (props.valueCounter < 0 && props.valueCounter < MaxValueNumber) || (props.valueCounter === MaxValueNumber) || (props.valueCounter > MaxValueNumber) ? true : false;\r\n\r\n\r\n    let disableModReset: boolean;\r\n    props.valueCounter !== MinValueNumber ? disableModReset = false : disableModReset = true;\r\n\r\n    const addNumber = () => props.setCounterValue(props.valueCounter + 1)\r\n\r\n    const resetNumber = () => props.setCounterValue(MinValueNumber)\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.settingDisplay_box} >\r\n\r\n            <CounterMonitor\r\n                ErrorMessage={props.ErrorMessage}\r\n                valueCounter={props.valueCounter}\r\n                MaxValueNumber={MaxValueNumber}\r\n            />\r\n\r\n            <div className={styles.button_box}>\r\n                <Button\r\n                    title={'Inc'}\r\n                    onClickFunction={addNumber}\r\n                    disableMod={disableModInc}\r\n                />\r\n                <Button\r\n                    title={'Reset'}\r\n                    onClickFunction={resetNumber}\r\n                    disableMod={disableModReset}\r\n                />\r\n                <NavLink to={'/Counter_2/displaySetCounter'} >\r\n                    <Button title={'Set'} />\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayCounter;","import React, {ChangeEvent} from 'react';\r\nimport styles from './CounterStyle.module.css'\r\n\r\nexport type ValueInputPropsType = {\r\n    title: string\r\n    onCange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    value: number\r\n    errorStyle: boolean\r\n}\r\nexport const ValueInput = (props: ValueInputPropsType) => {\r\n\r\nlet errorMode = props.errorStyle ? `${styles.input} ${styles.input_error}` : `${styles.input}`\r\n\r\n    return (\r\n        <div>\r\n            <span className={styles.titleValue}>{props.title}</span>\r\n            <input value={props.value}  onChange={props.onCange} className={errorMode} type={'number'}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ValueInput} from './ValueInput';\r\nimport styles from './CounterStyle.module.css'\r\nimport {Button} from './Button';\r\n\r\n\r\ntype DisplaySetCounterPropsType = {\r\n    callbackValueMin: (value: number) => void\r\n    callbackValueMax: (value: number) => void\r\n    setCounterValue: (value: number) => void\r\n    disableModSet: () => boolean\r\n    setButtonFunc: () => void\r\n    settingValueMax: number\r\n    settingValueMin: number\r\n    errorSet?: () => void\r\n}\r\n\r\nexport function DisplaySetCounter(props: DisplaySetCounterPropsType) {\r\n    const onCangeValueMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMin(Number(event.currentTarget.value))\r\n        props.setCounterValue(Number(event.currentTarget.value))\r\n\r\n\r\n    }\r\n\r\n    const onCangeValueMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMax(Number(event.currentTarget.value))\r\n\r\n    }\r\n\r\n    let disableMod = props.disableModSet()\r\n\r\n    return (\r\n\r\n        <div className={styles.settingDisplay_box}>\r\n            <div className={styles.settingDisplay}>\r\n                <ValueInput errorStyle={props.disableModSet()} value={props.settingValueMin} onCange={onCangeValueMin}\r\n                            title={'min value'}/>\r\n                <ValueInput errorStyle={props.disableModSet()} value={props.settingValueMax} onCange={onCangeValueMax}\r\n                            title={'max value'}/>\r\n            </div>\r\n            <div className={styles.button_box_setting}>\r\n                <div>\r\n                    <NavLink\r\n                        to={'/Counter_2/displayCounter'} >\r\n                        <Button title={'Set'} onClickFunction={props.setButtonFunc} disableMod={disableMod}/>\r\n                    </NavLink>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// aria-disabled={'true'}","import React, {useState} from 'react';\r\nimport DisplayCounter from './DisplayCounter';\r\nimport './../App.css';\r\nimport {Route} from 'react-router-dom';\r\nimport {DisplaySetCounter} from './DisplaySetCounter';\r\n\r\n\r\nexport function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n    return defaultState;\r\n}\r\n\r\n\r\nfunction CounterBox() {\r\n\r\n    const initialState = restoreState<Array<number>>('save setting2', [0, 0])\r\n\r\n    let [settingValueMin, setSettingValueMin] = useState(initialState[0])\r\n\r\n    let [settingValueMax, setSettingValueMax] = useState(initialState[1])\r\n\r\n    let [valueCounter, setCounterValue] = useState<number>(settingValueMin);\r\n\r\n    let array = [settingValueMin, settingValueMax]\r\n\r\n    const setButtonFunc = () => {\r\n        saveState<Array<number>>('save setting2', array)\r\n    }\r\n\r\n    let errorMessage: string = (settingValueMin === 0 && settingValueMax === 0) ? \"Click 'Set' and input value\": ''\r\n\r\n    const disableModSet = () => {\r\n        return (\r\n            (settingValueMax < 0) ||\r\n            (settingValueMin < 0) ||\r\n            (settingValueMin > settingValueMax) ||\r\n            (settingValueMin === settingValueMax) ||\r\n            (settingValueMax === 0 && settingValueMin < 0) ||\r\n            (settingValueMax < 0 && settingValueMin < 0) ||\r\n            (settingValueMax > 0 && settingValueMin < 0) ||\r\n            (settingValueMax > 0 && settingValueMin < 0)\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n                <Route path={'/Counter_2/displayCounter'}\r\n                       render={() =>\r\n                           <DisplayCounter\r\n                               setCounterValue={setCounterValue}\r\n                               valueCounter={valueCounter}\r\n                               settingValueMin={settingValueMin}\r\n                               settingValueMax={settingValueMax}\r\n                               setButtonFunc={setButtonFunc}\r\n                               ErrorMessage={errorMessage}\r\n                           />}\r\n                />\r\n                <Route path={'/Counter_2/displaySetCounter'}\r\n                       render={() =>\r\n                           <DisplaySetCounter\r\n                               callbackValueMin={setSettingValueMin}\r\n                               callbackValueMax={setSettingValueMax}\r\n                               setCounterValue={setCounterValue}\r\n                               disableModSet={disableModSet}\r\n                               setButtonFunc={setButtonFunc}\r\n                               settingValueMin={settingValueMin}\r\n                               settingValueMax={settingValueMax}\r\n                           />}\r\n                />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CounterBox;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from './App';\nimport Header from './Header';\nimport {HashRouter} from 'react-router-dom';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport CounterBox from './Counter_2.0/CounterBox';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Header/>\n            <Switch>\n                <Route path={'/'} exact render={() => <Redirect to={'/Counter'}/>}/>\n                <Route path={'/Counter'} render={() => <App/> }/>\n                <Route path={'/Counter_2'} render={() => <CounterBox/> }/>\n            </Switch>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingDisplay_box\":\"SettingsBox_settingDisplay_box__17OyQ\",\"settingDisplay\":\"SettingsBox_settingDisplay__yvCbE\",\"titleValue\":\"SettingsBox_titleValue__1WHaS\",\"input\":\"SettingsBox_input__39x2F\",\"input_error\":\"SettingsBox_input_error__24uCn\",\"button_box\":\"SettingsBox_button_box__1mPV0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_block\":\"Header_header_block__2hhkQ\",\"header_block_button\":\"Header_header_block_button__1kjKw\",\"activeLink\":\"Header_activeLink__36NIn\"};"],"sourceRoot":""}