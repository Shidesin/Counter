{"version":3,"sources":["Counter/SettingBox/SettingsBox.module.css","serviceWorker.ts","Counter/CounterDisplay.tsx","Counter/ButtonBlock.tsx","Counter/Counter.tsx","Counter/SettingBox/ValueInput.tsx","Counter/SettingBox/SettingsBox.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","CounterDisplay","props","ErrorMessage","correctDisplay","valueCounter","className","MaxValueNumber","Button","onClick","onClickFunction","disabled","disableMod","title","Counter","disableModInc","disableModReset","MinValueNumber","settingValueMin","settingValueMax","setCounterValue","ValueInput","errorMode","errorStyle","styles","input","input_error","titleValue","value","onChange","onCange","type","SettingCounter","settingDisplay_box","settingDisplay","disableModSet","event","callbackValueMin","Number","currentTarget","errorSet","callbackValueMax","button_box","setButtonFunc","App","initialState","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","restoreState","useState","setSettingValueMin","setSettingValueMax","error","setError","array","state","stringify","setItem","saveState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2a3f3587.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingDisplay_box\":\"SettingsBox_settingDisplay_box__17OyQ\",\"settingDisplay\":\"SettingsBox_settingDisplay__yvCbE\",\"titleValue\":\"SettingsBox_titleValue__1WHaS\",\"input\":\"SettingsBox_input__39x2F\",\"input_error\":\"SettingsBox_input_error__24uCn\",\"button_box\":\"SettingsBox_button_box__1mPV0\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n/*import limitNumber from './Counter';*/\r\n\r\n\r\ntype PropsType = {\r\n    valueCounter: number\r\n    MaxValueNumber: number\r\n    ErrorMessage?: string\r\n}\r\n\r\nexport const CounterDisplay = (props:PropsType ) => {\r\n\r\n    let ErrorMessage = props.ErrorMessage\r\n\r\n    let correctDisplay = ErrorMessage ? ErrorMessage : props.valueCounter\r\n\r\n\r\n    return (\r\n        <div className= {props.valueCounter < props.MaxValueNumber ? `${'display_box'}` : `${'end_number'}`} >\r\n            {correctDisplay}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onClickFunction: () => void\r\n    disableMod: boolean\r\n    disableModSet?: () => boolean\r\n}\r\n\r\n\r\nexport function Button(props: PropsType) {\r\n    return (\r\n            <button className={'button'} onClick={props.onClickFunction} disabled={props.disableMod} >{props.title}</button>\r\n    )\r\n}","import React from 'react';\r\nimport {CounterDisplay} from './CounterDisplay';\r\nimport {Button} from './ButtonBlock';\r\nimport './Counter.css';\r\n\r\n\r\ntype CounterPropsType = {\r\n    minMaxValue?: Array<number>\r\n    valueCounter: number\r\n    setCounterValue: (value: number) => void\r\n    ErrorMessage: string\r\n    settingValueMin: number\r\n    settingValueMax: number\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n\r\n    const MinValueNumber = props.settingValueMin;\r\n    const MaxValueNumber = props.settingValueMax;\r\n\r\n\r\n    let disableModInc: boolean;\r\n    props.valueCounter < MaxValueNumber ? disableModInc = false : disableModInc = true;\r\n\r\n    let disableModReset: boolean;\r\n    props.valueCounter !== MinValueNumber ? disableModReset = false : disableModReset = true;\r\n\r\n    const addNumber = () => props.setCounterValue(props.valueCounter + 1)\r\n\r\n    const resetNumber = () => props.setCounterValue(MinValueNumber)\r\n\r\n\r\n    return (\r\n        <div className={'counter_box'}>\r\n            <CounterDisplay ErrorMessage={props.ErrorMessage} valueCounter={props.valueCounter}\r\n                            MaxValueNumber={MaxValueNumber}/>\r\n            <div className={'button_box'}>\r\n                <Button title={'Inc'} onClickFunction={addNumber} disableMod={disableModInc}/>\r\n                <Button title={'Reset'} onClickFunction={resetNumber} disableMod={disableModReset}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import styles from './SettingsBox.module.css';\r\nimport React, {ChangeEvent} from 'react';\r\n\r\nexport type ValueInputPropsType = {\r\n    title: string\r\n    onCange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    value: number\r\n    errorStyle: boolean\r\n}\r\nexport const ValueInput = (props: ValueInputPropsType) => {\r\n\r\nlet errorMode = props.errorStyle ? `${styles.input} ${styles.input_error}` : `${styles.input}`\r\n\r\n    return (\r\n        <div>\r\n            <span className={styles.titleValue}>{props.title}</span>\r\n            <input value={props.value}  onChange={props.onCange} className={errorMode} type={'number'}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport styles from './SettingsBox.module.css'\r\nimport {Button} from '../ButtonBlock';\r\nimport {ValueInput} from './ValueInput';\r\n\r\n\r\ntype SettingCounterPropsType = {\r\n    callbackValueMin: (value: number) => void\r\n    callbackValueMax: (value: number) => void\r\n    setCounterValue: (value: number) => void\r\n    disableModSet: () => boolean\r\n    setButtonFunc: () => void\r\n    settingValueMax: number\r\n    settingValueMin: number\r\n    errorSet: () => void\r\n}\r\n\r\nexport function SettingCounter(props: SettingCounterPropsType) {\r\n\r\n    const onCangeValueMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMin(Number(event.currentTarget.value))\r\n        props.setCounterValue(Number(event.currentTarget.value))\r\n        props.errorSet()\r\n\r\n    }\r\n\r\n    const onCangeValueMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callbackValueMax(Number(event.currentTarget.value))\r\n        props.errorSet()\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={styles.settingDisplay_box}>\r\n            <div className={styles.settingDisplay}>\r\n                <ValueInput errorStyle={props.disableModSet()} value={props.settingValueMin} onCange={onCangeValueMin}\r\n                            title={'min value'}/>\r\n                <ValueInput errorStyle={props.disableModSet()} value={props.settingValueMax} onCange={onCangeValueMax}\r\n                            title={'max value'}/>\r\n            </div>\r\n            <div className={styles.button_box}>\r\n                <Button title={'Set'} onClickFunction={props.setButtonFunc} disableMod={props.disableModSet()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './Counter/Counter';\nimport {SettingCounter} from './Counter/SettingBox/SettingsBox';\n\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state);\n    localStorage.setItem(key, stateAsString)\n}\nexport function restoreState<T>(key: string, defaultState: T) {\n    const stateAsString = localStorage.getItem(key);\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\n    return defaultState;\n}\n\n\nexport function App() {\n\n    const initialState = restoreState<Array<number>>('save setting', [0,0])\n\n    let [settingValueMin, setSettingValueMin] = useState(initialState[0])\n    let [settingValueMax, setSettingValueMax] = useState(initialState[1])\n\n\n\n    let [valueCounter, setCounterValue] = useState<number>(settingValueMin);\n\n    let [error, setError] = useState<string>(\"Input values and click 'set'\")\n\n\n    // const callBack = (value: Array<number>) => setMinMaxValue(value);\n\n    // const callBackError = (value: string) => setError(value)\n\n    const disableModSet = () => {\n        errorSet()\n        return settingValueMin === null || settingValueMax === null || settingValueMin < 0 || settingValueMin > settingValueMax || settingValueMin === settingValueMax || settingValueMax < 0 ;\n    }\n\n    let array = [settingValueMin, settingValueMax]\n\n    const errorSet = () => {\n        if ( settingValueMin < 0 || settingValueMin > settingValueMax  || settingValueMax < 0) {\n            setError('Incorrect value')\n        } else if(settingValueMin === settingValueMax) {\n            setError(\"Input values and click 'set'\")\n        } else {\n            setError('')\n        }\n    }\n\n    const setButtonFunc = () => {\n        saveState<Array<number>>('save setting',array )\n    }\n\n    return (\n        <div className=\"App\">\n            <SettingCounter\n                callbackValueMin={setSettingValueMin}\n                callbackValueMax={setSettingValueMax}\n                setCounterValue={setCounterValue}\n                disableModSet={disableModSet}\n                setButtonFunc={setButtonFunc}\n                settingValueMin={settingValueMin}\n                settingValueMax={settingValueMax}\n                errorSet={errorSet}\n            />\n            <Counter\n                valueCounter={valueCounter}\n                setCounterValue={setCounterValue}\n                ErrorMessage={error}\n                settingValueMin={settingValueMin}\n                settingValueMax={settingValueMax}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}